## Natural Language Toolkit: feat0.fcfg
##
## First example of a feature-based grammar for English, illustrating
## value-sharing of NUM and TENSE features.
## Used in Feature-Based Grammars chapter.
## 
## Author: Ewan Klein <ewan@inf.ed.ac.uk> 
## URL: <http://nltk.sourceforge.net>
## For license information, see LICENSE.TXT

% start S
# ################### #
# Grammar Productions #
# ################### #


### S expansion productions ###
S[SENTIMENT=?s] -> S ',' Coord[TYPE=disj] S[SENTIMENT=?s]
S[SENTIMENT=?s] -> S[SENTIMENT=?s] ',' Coord[TYPE=conj] S[SENTIMENT=?s]
S[SENTIMENT=?s] -> S[SENTIMENT=?s] Coord[TYPE=conj] S[SENTIMENT=?s]
S[SENTIMENT=?s] -> NP[SENTIMENT=?s]
S[SENTIMENT=?s] -> Coord[TYPE=disj] S[SENTIMENT=?s] 

S -> S ';' S
S -> PP ',' S

# Declarative sentence
S[MOOD=decl, SENTIMENT=?s] -> NP[NUM=?n, PERS=?p, SENTIMENT=?s, POSITION=subject] VP[NUM=?n, PERS?=p, SENTIMENT=?s]
# Yes/no question
S[MOOD=ynq] -> Aux NP[NUM=?n] VP[NUM=?n]
# Wh-question
S[MOOD=whq] -> Wh Aux NP[NUM=?n] VP[NUM=?n]
#Imperative
S[MOOD=imper] -> VP[TENSE=infinitive]


### Clause expansion productions ###
Clause[TYPE=?t, SENTIMENT=?s] -> Clause[TYPE=?t, SENTIMENT=?s] Coord[TYPE=conj] Clause[TYPE=?t, SENTIMENT=?s]
Clause[TYPE=s, SENTIMENT=?s] -> S[MOOD=decl, SENTIMENT=?s]
Clause[TYPE=relative, SENTIMENT=?s] -> ProN[TYPE=relative] S[SENTIMENT=?s]
Clause[TYPE=vp_inf, SENTIMENT=?s] -> VP[TENSE=infinitive, SENTIMENT=?s]


### NP expansion productions ###
## Coordinated NPs
NP[NUM=pl, PERS=3, POSITION=?x] -> NP[POSITION=?x] Coord[TYPE=conj] NP[POSITION=?x]
NP[NUM=pl, PERS=3, POSITION=?x] -> NP[POSITION=?x] ',' Coord[TYPE=conj] NP[POSITION=?x] ','

NP[NUM=?n, PERS=?p, POSITION=?x] -> NP[NUM=?n, PERS=?p, POSITION=?x] Clause[TYPE=s]
NP[NUM=?n, PERS=?p, POSITION=?x] -> NP[NUM=?n, PERS=?p, POSITION=?x] ',' Clause[TYPE=wh]

## Negated NPs ##
NP[NUM=?n, PERS=?p, POSITION=?x, SENTIMENT=pos] -> Neg NP[NUM=?n, PERS=?p, POSITION=?x, SENTIMENT=neg]
NP[NUM=?n, PERS=?p, POSITION=?x, SENTIMENT=neg] -> Neg NP[NUM=?n, PERS=?p, POSITION=?x, SENTIMENT=pos]

## NP with NO determiner ##
NP[POSITION=subject] -> ProN[TYPE=subj, NUM=?n, PERS=?p] 
NP[POSITION=object] -> ProN[TYPE=rflex, NUM=?n, PERS=?p] | ProN[TYPE=obj, NUM=?n, PERS=?p]

NP[NUM=pl, PERS=?p] -> Nom[NUM=pl, PERS=?p] 
NP[NUM=?n, PERS=?p] -> Det[NUM=?n, SUBCAT=demonstrative]
NP[NUM=sg, PERS=?p] -> Nom[PERS=?p, MASS=1] 
NP[NUM=?n, PERS=3] -> ProperNoun[NUM=?n, NEED_DET=0]
NP[NUM=pl, PERS=?p, SENTIMENT=?s] -> AdjP[SENTIMENT=?s] Nom[NUM=pl, PERS=?p] 
NP[NUM=?n, PERS=?p, SENTIMENT=?s] -> AdjP[SENTIMENT=?s] Nom[NUM=?n, PERS=?p, MASS=1]
NP[NUM=?n, PERS=3, SENTIMENT=?s] -> AdjP[SENTIMENT=?s] ProperNoun[NUM=?n, NEED_DET=0]

NP[NUM=sg, SENTIMENT=?s] -> VP[TENSE=gerund, SENTIMENT=?s]

## NP with determiner ##
NP[NUM=?n, PERS=3] -> Det[NUM=?n] ProperNoun[NUM=?n] 
NP[NUM=?n, PERS=?p, SENTIMENT=?s] -> Det[NUM=?n] Nom[NUM=?n, PERS=?p, SENTIMENT=?s]
NP[NUM=?n, PERS=?p, POSITION=?x, SENTIMENT=?s] -> Det[NUM=?n] '"' NP[NUM=?n, PERS=?p, POSITION=?x, SENTIMENT=?s] '"'
NP[NUM=?n, PERS=?p, SENTIMENT=?s] -> Det[NUM=?n] AdjP[SENTIMENT=?s] Nom[NUM=?n, PERS=?p, SENTIMENT=?s]
NP[NUM=?n, PERS=?p, SENTIMENT=?s] -> Predeterminer Det[NUM=?n] AdjP[SENTIMENT=?s] Nom[NUM=?n, PERS=?p]
NP[NUM=?n, PERS=?p, SENTIMENT=?s] -> Predeterminer Det[NUM=?n] Nom[NUM=?n, PERS=?p]
NP[NUM=?n, PERS=?p, SENTIMENT=?s] -> Det[NUM=?n, SUBCAT=article] Postdeterminer Nom[NUM=?n, PERS=?p, SENTIMENT=?s]



### Nom expansion productions ###
Nom[NUM=?n, PERS=?p, MASS=?m] -> Noun Nom[NUM=?n, PERS=?p, MASS=?m]
Nom[NUM=?n, PERS=?p, MASS=?m] -> DP Nom[NUM=?n, PERS=?p, MASS=?m]

Nom[NUM=?n, PERS=?p, MASS=?m, SENTIMENT=?s] -> Noun[NUM=?n, PERS=?p, MASS=?m, SENTIMENT=?s]

Nom[NUM=?n, PERS=?p, MASS=?m] -> Nom[NUM=?n, PERS=?p, MASS=?m] PP
Nom[NUM=?n, PERS=?p, MASS=?m] -> Nom[NUM=?n, PERS=?p, MASS=?m] VP[TENSE=gerund]
Nom[NUM=?n, PERS=?p, MASS=?m] -> Nom[NUM=?n, PERS=?p, MASS=?m] Clause[TYPE=relative]



### VP expansion productions ###
VP[TENSE=?t, NUM=?n, SENTIMENT=?s] -> AdvP[SENTIMENT=?s] VP[TENSE=?t, NUM=?n, SENTIMENT=?s] 
VP[TENSE=?t, NUM=?n, SENTIMENT=?s] -> VP[TENSE=?t, NUM=?n, SENTIMENT=?s] AdvP[SENTIMENT=?s] 

VP[TENSE=?t, NUM=?n, SENTIMENT=?s] -> VP[NUM=?n, SENTIMENT=?s] Coord[TYPE=conj] VP[TENSE=?t, NUM=?n, SENTIMENT=?s]
VP[TENSE=?t, NUM=?n, SENTIMENT=?s] -> VP[NUM=?n] Coord[TYPE=disj] VP[TENSE=?t, NUM=?n, SENTIMENT=?s]



### BASIC TENSES ###
VP[TENSE=infinitive, SENTIMENT=?s] -> 'to' V_B[TENSE=infinitive, SENTIMENT=?s]
VP[TENSE=infinitive, SENTIMENT=?s] -> V_B[TENSE=infinitive, SENTIMENT=?s]

VP[TENSE=simple_pres, VOICE=active, NUM=?n, SENTIMENT=?s] -> V_B[TENSE=simple_pres, SENTIMENT=?s]

VP[TENSE=simple_past, VOICE=active, NUM=?n, SENTIMENT=?s] -> Aux[FORM=do, TENSE=past] V_B[TENSE=simple_pres, SENTIMENT=?s]
VP[TENSE=simple_past, VOICE=active, NUM=?n, SENTIMENT=?s] -> V_B[TENSE=simple_past, SENTIMENT=?s]

VP[TENSE=simple_future, VOICE=active, NUM=?n, SENTIMENT=?s] -> Modal[FORM=will] V_B[TENSE=infinitive, SENTIMENT=?s]

VP[TENSE=pres_perf, VOICE=active, NUM=?n, SENTIMENT=?s] -> Aux[FORM=have, TENSE=past] V_B[TENSE=past_participle, SENTIMENT=?s]

VP[TENSE=future_perf, VOICE=active, NUM=?n, SENTIMENT=?s] -> Modal[FORM=will] Aux[FORM=have, TENSE=inf] V_B[TENSE=past_participle, SENTIMENT=?s]

VP[TENSE=past_perf, VOICE=active, NUM=?n, SENTIMENT=?s] -> Aux[FORM=have, TENSE=past] V_B[TENSE=past_participle, SENTIMENT=?s]

### PROGRESSIVE TENSES ###
VP[TENSE=pres_progressive, VOICE=active, NUM=?n, SENTIMENT=?s] -> Aux[FORM=be, TENSE=present] V_B[TENSE=pres_participle, SENTIMENT=?s]
VP[TENSE=past_progressive, VOICE=active, NUM=?n, SENTIMENT=?s] -> Aux[FORM=be, TENSE=past] V_B[TENSE=pres_participle, SENTIMENT=?s]
VP[TENSE=future_progressive, VOICE=active, NUM=?n, SENTIMENT=?s] -> Aux[FORM=be, TENSE=present] V_B[TENSE=pres_participle, SENTIMENT=?s]

VP[TENSE=gerund, SENTIMENT=?s] -> V_B[TENSE=pres_participle, SENTIMENT=?s]


### V_BAR RULES ###
V_B[TENSE=?t, NUM=?n, SENTIMENT=?s] -> IV[TENSE=?t, NUM=?n, SENTIMENT=?s]

V_B[TENSE=?t, NUM=?n, SENTIMENT=?s] -> TV[TENSE=?t, NUM=?n, ARG1=adj, SENTIMENT=?s] AdjP[SENTIMENT=?s]
V_B[TENSE=?t, NUM=?n, SENTIMENT=?s] -> TV[TENSE=?t, NUM=?n, ARG1=np, SENTIMENT=?s] NP[POSITION=object, SENTIMENT=?s]
V_B[TENSE=?t, NUM=?n, SENTIMENT=?s] -> TV[TENSE=?t, NUM=?n, ARG1=pp, SENTIMENT=?s] PP
V_B[TENSE=?t, NUM=?n, SENTIMENT=?s] -> TV[TENSE=?t, NUM=?n, ARG1=cl, SENTIMENT=?s] Clause[TYPE=s, SENTIMENT=?s]
V_B[TENSE=?t, NUM=?n, SENTIMENT=?s] -> TV[TENSE=?t, NUM=?n, ARG1=cl, SENTIMENT=?s] Clause[TYPE=vp_inf, SENTIMENT=?s]

V_B[TENSE=?t, NUM=?n, SENTIMENT=?s] -> DTV[TENSE=?t, NUM=?n, ARG1=np, ARG2=pp, SENTIMENT=?s] NP[POSITION=object, SENTIMENT=?s] PP
V_B[TENSE=?t, NUM=?n, SENTIMENT=?s] -> DTV[TENSE=?t, NUM=?n, ARG1=pp, ARG2=pp, SENTIMENT=?s] PP PP

V_B[TENSE=?t, SENTIMENT=?s] -> NegP[TENSE=?t, SENTIMENT=?s]

## Negated Verb Phrases ##
NegP[TENSE=?t, SENTIMENT=pos] -> Neg V_B[TENSE=infinitive, SENTIMENT=neg]
NegP[TENSE=?t, SENTIMENT=neg] -> Neg V_B[TENSE=infinitive, SENTIMENT=pos]


## Auxiliary Verbs ##
Aux[FORM=be, TENSE=present] -> 'is'
Aux[FORM=be, TENSE=past] -> 'was'
Aux[FORM=be, TENSE=inf] -> 'be'
Aux[FORM=be, TENSE=past_participle] -> 'been'

Aux[FORM=have, TENSE=present] -> 'has'
Aux[FORM=have, TENSE=past] -> 'had'
Aux[FORM=have, TENSE=inf] -> 'have'

Aux[FORM=do, TENSE=present] -> 'does'
Aux[FORM=do, TENSE=past] -> 'did'

# Passive Auxiliary ###
Aux[TYPE=passive] -> 'should' | 'was' | 'is' | 'were' | 'is' 'being' | 'have'


## Modal Verbs ##
Modal[FORM=will] -> 'will'
Modal[FORM=can] -> 'can'
Modal[FORM=could] -> 'could'
Modal[FORM=should] -> 'should'


## Passive voice ##
IV[TENSE=passive_past, VOICE=passive] -> Aux[TYPE=passive] IVBar[TENSE=past_participle]
TV[TENSE=passive_past, VOICE=passive, ARG1=?a1] -> Aux[TYPE=passive] TVBar[TENSE=past_participle, ARG1=?a1]
DTV[TENSE=passive_past, VOICE=passive, ARG1=?a1, ARG2=?a2] -> Aux[TYPE=passive] DTVBar[TENSE=past_participle, ARG1=?a1, ARG2=?a2]

# ADDING ADVERBS to PASSIVE VOICE
IV[TENSE=passive_past, VOICE=passive] -> Aux[TYPE=passive] AdvP IVBar[TENSE=past_participle]
TV[TENSE=passive_past, VOICE=passive, ARG1=?a1] -> Aux[TYPE=passive] AdvP TVBar[TENSE=past_participle, ARG1=?a1]
DTV[TENSE=passive_past, VOICE=passive, ARG1=?a1, ARG2=?a2] -> Aux[TYPE=passive] Adv DTVBar[TENSE=past_participle, ARG1=?a1, ARG2=?a2]


### PP expansion productions ###
PP[SENTIMENT=?s] -> P NP[SENTIMENT=?s]
PP[SENTIMENT=?s] -> P VP[SENTIMENT=?s]
PP[SENTIMENT=?s] -> P S[MOOD=decl, SENTIMENT=?s]
PP[SENTIMENT=?s] -> P AdjP[SENTIMENT=?s]


### DP expansion productions ###
DP -> NP POSS


### AdjP expansion productions ###
AdjP[SENTIMENT=?s] -> Adj[SENTIMENT=?s]
AdjP[SENTIMENT=?s] -> AdvP Adj[SENTIMENT=?s]
AdjP[SENTIMENT=?s] -> Adj[SENTIMENT=?s] Clause[TYPE=vp_inf, SENTIMENT=?s]

AdjP[SENTIMENT=?s] -> AdjP[SENTIMENT=?s] Adj[SENTIMENT=?s]

AdjP[SENTIMENT=?s] -> Adj[SENTIMENT=?s] ',' Adj[SENTIMENT=?s]

AdjP[SENTIMENT=?s] -> AdjP[SENTIMENT=?s] Coord[TYPE=conj] AdjP[SENTIMENT=?s]
AdjP[SENTIMENT=?s] -> AdjP[SENTIMENT=?s] ',' Coord[TYPE=conj] AdjP[SENTIMENT=?s]

AdjP[SENTIMENT=pos] -> AdjP[SENTIMENT=neg] Coord[TYPE=disj] AdjP[SENTIMENT=pos]
AdjP[SENTIMENT=neg] -> AdjP[SENTIMENT=pos] Coord[TYPE=disj] AdjP[SENTIMENT=neg]
AdjP[SENTIMENT=pos] -> AdjP[SENTIMENT=neg] ',' Coord[TYPE=disj] AdjP[SENTIMENT=pos]
AdjP[SENTIMENT=neg] -> AdjP[SENTIMENT=pos] ',' Coord[TYPE=disj] AdjP[SENTIMENT=neg]

## Negated AdjPs ##
AdjP[SENTIMENT=pos] -> Neg AdjP[SENTIMENT=neg]
AdjP[SENTIMENT=neg] -> Neg AdjP[SENTIMENT=pos]



### Adverb expansion productions ###
AdvP[SENTIMENT=?s] -> Adv[SENTIMENT=?s]
AdvP[SENTIMENT=?s] -> Adv[SENTIMENT=?s] AdvP[SENTIMENT=?s]
AdvP[SENTIMENT=?s] -> Adv[SENTIMENT=?s] ',' AdvP[SENTIMENT=?s]
AdvP[SENTIMENT=?s] -> Adv ',' Coord[TYPE=disj] AdvP[SENTIMENT=?s]
AdvP[SENTIMENT=?s] -> AdjP[SENTIMENT=?s] AdvP[SENTIMENT=?s]
AdvP[SENTIMENT=?s] -> AdvP[SENTIMENT=?s] PP[SENTIMENT=?s] 

# ################### #
# Lexical Productions #
# ################### #

### Predeterminers ###
Predeterminer -> 'such' | 'all' | 'any' 'of'

### Determiners ###
Det[SUBCAT=article] -> 'the'
Det[NUM=sg, SUBCAT=article] -> 'a' | 'an'

Det[NUM=sg, SUBCAT=demonstrative] -> 'this' | 'that'
Det[NUM=pl, SUBCAT=demonstrative] -> 'those' | 'these'

Det[SUBCAT=possessive] -> 'her' | 'his' | 'its' | 'their' | 'your' | 'my'

Det[SUBCAT=wh] -> 'which' | 'what'

Det[NUM=sg, SUBCAT=quantifying] -> 'every' 
Det[NUM=pl, SUBCAT=quantifying] -> 'most' | 'all' |  'several' | 'some' | 'few' | 'any' 'of'

### Postdeterminers ###
Postdeterminer -> CD Ordinal
Postdeterminer -> CD Quantifier
Postdeterminer -> Ordinal Quantifier
Postdeterminer -> CD Ordinal Quantifier
Postdeterminer -> CD | Ordinal | Quantifier


### Coordinators ###
## Conjunctions
Coord[TYPE=conj] -> 'and' 
Coord[TYPE=disj] -> 'but' | 'or' 


### Possessive Marker ###
POSS -> "'s"


### Wh-words ###
Wh -> 'who' | 'what' | 'where' | 'when' | 'why' | 'how'


### Negation ###
Neg -> 'not' | 'NOT' | "n't"


### Prepositions ###
P -> 'above' | 'about' | 'across' | 'after' | 'at' | 'around' | 'before' | 'behind' | 'below' | 'beside' | 'between' | 'by' 
P -> 'down' | 'during' | 'for' | 'from' | 'in' | 'inside' | 'near' | 'onto' | 'of' | 'off' | 'on' | 'out' | 'over'
P ->  'through' | 'to' | 'under' | 'up' | 'with' 


### Cardinal Numbers ###
CD -> '87' | '11pm' | 'one' | 'two' | 'seven' | '17' | '135' | '1655' | '7' | '1985'

### Ordinals ###
Ordinal -> 'first'

### Quantifier ###
Quantifier -> 'many' | 'few'

### Adjectives ###
Adj -> 'flat' | 'main' | 'direct' | 'potential' | 'far'

Adj[SENTIMENT=pos] -> 'perfect' | 'terrific' | 'rich' | 'addicting' | 'fun' | 'cool' | 'good' | 'easy' | 'nice' | 'excellent'
Adj[SENTIMENT=pos] -> 'strong' | 'independent' | 'great' | 'few' | 'rare' | 'cute' | 'silky' | 'lyrical' | 'smart' | 'AWSOME' | 'entertaining'

Adj[SENTIMENT=neg] -> 'uninventive' | 'simple' | 'disappointed' | 'horrible' | 'lousy' | 'basic' | 'bad' | 'terrible'

### Adverbs ###
Adv -> 'also' | 'soon' | 'quickly' | 'just' | 'even' | 'extremely' | 'really' | 'very' | 'much' | 'away'
Adv[SENTIMENT=pos] -> 'better'


### Pronouns ###
## Subject type
ProN[TYPE=subj, NUM=sg, PERS=1] -> 'I'
ProN[TYPE=subj, NUM=pl, PERS=1] -> 'we'
ProN[TYPE=subj, PERS=2] -> 'you'
ProN[TYPE=subj, NUM=sg, PERS=3, GEN=masc] -> 'he'
ProN[TYPE=subj, NUM=sg, PERS=3, GEN=fem] -> 'she'
ProN[TYPE=subj, NUM=sg, PERS=3] -> 'it'
ProN[TYPE=subj, NUM=pl, PERS=3] -> 'they'

## Object type
ProN[TYPE=obj, NUM=sg, PERS=1] -> 'me'
ProN[TYPE=obj, NUM=pl, PERS=1] -> 'us'
ProN[TYPE=obj, PERS=2] -> 'you'
ProN[TYPE=obj, NUM=sg, PERS=3, GEN=masc] -> 'him'
ProN[TYPE=obj, NUM=sg, PERS=3, GEN=fem] -> 'her'
ProN[TYPE=obj, NUM=sg, PERS=3] -> 'it'
ProN[TYPE=obj, NUM=pl, PERS=3] -> 'them'

## Reflexive type
ProN[TYPE=rflex, NUM=sg, PERS=1] -> 'myself'
ProN[TYPE=rflex, NUM=sg, PERS=2] -> 'yourself'
ProN[TYPE=rflex, NUM=pl, PERS=2] -> 'yourselves'
ProN[TYPE=rflex, NUM=sg, PERS=3, GEN=masc] -> 'himself'
ProN[TYPE=rflex, NUM=sg, PERS=3, GEN=fem] -> 'herself'
ProN[TYPE=rflex, NUM=sg, PERS=3] -> 'themself'
ProN[TYPE=rflex, NUM=pl, PERS=3] -> 'themselves'

## Relative type
ProN[TYPE=relative] -> 'that' | 'who'

### Proper Nouns ###
# Do not need to be preceded by determiner
ProperNoun[NUM=sg, NEED_DET=0] -> 'NG2' | 'Guthrie' | 'Eragon' | 'Mr' 'Lieven'
ProperNoun[NUM=pl, NEED_DET=0] -> 'Muslims' | 'Iranians'

# Must be preceded by determiner
ProperNoun[NUM=sg, NEED_DET=1, PERS=3] -> 'Foundation' 'Series' | 'Best' 'Party' 'of' 'Allah' | 'Australian' 'Capital' 'Territory'
ProperNoun[NUM=pl, NEED_DET=1, PERS=3] -> 'Houston' 'Astros' | 'White' 'Sox' | 'Muslims' 


### Nouns ###
# Singular
Noun[NUM=sg, PERS=3] -> 'sound' | 'campaign' | 'mode' | 'fact' | 'storyline' | 'CD' | 'movie' | 'film' | 'story'
Noun[NUM=sg, PERS=3] -> 'beginner' | 'tablet' | 'curve' | 'game' | 'character' | 'book' | 'character' | 'cd' | 'voice'
Noun[NUM=sg, PERS=3, SENTIMENT=pos] -> 'genius' | 'choice'

# Plural
Noun[NUM=pl, PERS=3] -> 'dogs' | 'girls' | 'cars' | 'controls' | 'pits' | 'remakes' | 'lyrics' | 'readers' | 'CDs'
Noun[NUM=pl, PERS=3] -> 'songs' | 'essentials' | 'exercises'

# Mass nouns
Noun[NUM=sg, PERS=3, MASS=1] -> 'cancer' | 'incarceration' | 'time' | 'learning' | 'gameplay' | 'job' | 'bias'
Noun[NUM=sg, PERS=3, MASS=1, SENTIMENT=neg] -> 'bore'

### Verbs ###

## Tense: Simple Present ##
IV[TENSE=simple_pres, NUM=sg] -> 'disappears' | 'walks'

TV[TENSE=simple_pres, NUM=sg, ARG1=np] -> 'is' | 'causes' | 'needs' | 'has' | 'does'
TV[TENSE=simple_pres, NUM=sg, ARG1=np, SENTIMENT=pos] -> 'like' | 'love'
TV[TENSE=simple_pres, NUM=sg, ARG1=pp] -> 'is' | 'resides' | 'plans' | 'works' | 'belongs' | 'comes' | 'suffers'
TV[TENSE=simple_pres, NUM=sg, ARG1=adj] -> 'is' | 'taste'
TV[TENSE=simple_pres, NUM=sg, ARG1=cl] -> 'says'

# A modal verb takes a clause as an argument
TV[TENSE=simple_pres, ARG1=cl] -> Modal

IV[TENSE=simple_pres, NUM=pl] -> 'disappear' | 'walk'
TV[TENSE=simple_pres, NUM=pl, ARG1=np] -> 'play' | 'are' | 'represent' | 'back' | 'open'
TV[TENSE=simple_pres, NUM=pl, ARG1=adj] -> 'are'
TV[TENSE=simple_pres, NUM=pl, ARG1=cl] -> 'claim'

DTV[TENSE=simple_pres, NUM=pl, ARG1=np, ARG2=pp] -> 'obtain'

## Tense: Simple Past ##
IV[TENSE=simple_past] -> 'disappeared' | 'walked' 

TV[TENSE=simple_past, ARG1=np] -> 'invented' | 'was' | 'defeated' | 'incited' | 'read'
TV[TENSE=simple_past, ARG1=np, SENTIMENT=pos] -> 'liked' | 'assisted' | 'praised' | 'loved'
TV[TENSE=simple_past, ARG1=np, SENTIMENT=neg] -> 'died'  | 'killed'
TV[TENSE=simple_past, ARG1=pp] -> 'participated' | 'died' | 'worked' | 'killed' | 'was' | 'named' | 'elected' | 'protested' | 'linked' | 'began' | 'grew' | 'cared' | 'rushed'
TV[TENSE=simple_past, ARG1=adj] -> 'was'
TV[TENSE=simple_past, ARG1=cl] -> 'seemed'

DTV[TENSE=simple_past, ARG1=np, ARG2=pp] -> 'wrote' | 'named' | 'elected' | 'discovered' | 'became'
DTV[TENSE=simple_past, ARG1=pp, ARG2=pp] -> 'relied'


TTV[TENSE=simple_past, ARG1=np, ARG2=pp, ARG3=pp] -> 'escaped'


## Tense: Infinitive ##
IV[TENSE=infinitive] -> 'disappear' | 'walk' | 'sing' | 'dance' | 'read'
IV[TENSE=infinitive, SENTIMENT=neg] -> 'disappoint'
TV[TENSE=infinitive, ARG1=pp] -> 'work' 
TV[TENSE=infinitive, ARG1=pp, SENTIMENT=neg] -> 'worry' 
TV[TENSE=infinitive, ARG1=np, SENTIMENT=pos] -> 'like' 
TV[TENSE=infinitive, ARG1=np] -> 'sell' | 'combat' | 'be'
TV[TENSE=infinitive, ARG1=adj] -> 'taste' | 'be'


## Past Participle ##
IV[TENSE=past_participle] -> 'disappeared' | 'walked' | 'attacked'

TV[TENSE=past_participle, ARG1=np] -> 'recommended' | 'elected' | 'heard'
TV[TENSE=past_participle, ARG1=pp] -> 'based' | 'built' | 'killed' | 'named' | 'criticised' 
TV[TENSE=past_participle, ARG1=cl] -> 'said'

DTVBar[TENSE=past_participle, ARG1=np, ARG2=pp] -> 'wrote' | 'backed'
DTVBar[TENSE=past_participle, ARG1=pp, ARG2=pp] -> 'approached' | 'formed' | 'linked'

## Present Participle ##
IV[TENSE=pres_participle] -> 'disappearing' | 'walking' 
TV[TENSE=pres_participle, ARG1=pp, SENTIMENT=pos] -> 'maturing'
DTV[TENSE=pres_participle, ARG1=np, ARG2=pp] -> 'transporting' 

